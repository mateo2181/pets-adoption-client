// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  petsCreated   Pet[]     @relation("pets_creatorIdTousers")
  petsOwner     Pet[]     @relation("pets_ownerIdTousers")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// PETS
enum pets_status_enum {
  has_owner
  adoption
  lost
}

model Pet {
  id                          Int              @id @default(autoincrement())
  name                        String           @db.VarChar
  high                        String           @db.VarChar
  petTypeId                   Int?
  creatorId                   String?
  status                      pets_status_enum @default(has_owner)
  petBreedId                  Int?
  ownerId                     String?
  creator                     User?            @relation("pets_creatorIdTousers", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  owner                       User?            @relation("pets_ownerIdTousers", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  breed                       PetBreed?        @relation(fields: [petBreedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  type                        PetType?         @relation(fields: [petTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  created_at                  DateTime         @default(now()) @db.Timestamp(6)
  pictures                    PetPictures[]

   @@map("pets")
}

model PetBreed {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar
  petTypeId Int?
  type      PetType?   @relation(fields: [petTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pets      Pet[]

  @@map("pets_breed")
}

model PetPictures {
  id         Int      @id @default(autoincrement())
  path       String   @db.VarChar
  petId      Int?
  created_at DateTime @default(now()) @db.Timestamp(6)
  pet        Pet?     @relation(fields: [petId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("pets_pictures")
}

model PetType {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar
  pets       Pet[]
  breeds     PetBreed[]

  @@map("pets_type")
}